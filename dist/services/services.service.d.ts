import { Repository, EntityManager, DataSource } from 'typeorm';
import { FilterServicesDto } from './dto/filter-service.dto';
import { ClientService } from '../clients/clients.service';
import { EmployeesService } from '../employees/employees.service';
import { VehiclesService } from '../vehicles/vehicles.service';
import { ChemicalToiletsService } from '../chemical_toilets/chemical_toilets.service';
import { ServiceState } from '../common/enums/resource-states.enum';
import { Empleado } from '../employees/entities/employee.entity';
import { Vehicle } from '../vehicles/entities/vehicle.entity';
import { ChemicalToilet } from '../chemical_toilets/entities/chemical_toilet.entity';
import { VehicleMaintenanceService } from '../vehicle_maintenance/vehicle_maintenance.service';
import { ToiletMaintenanceService } from '../toilet_maintenance/toilet_maintenance.service';
import { EmployeeLeavesService } from '../employee_leaves/employee-leaves.service';
import { CondicionesContractuales } from '../contractual_conditions/entities/contractual_conditions.entity';
import { FutureCleaningsService } from '../future_cleanings/futureCleanings.service';
import { CreateServiceDto, ResourceAssignmentDto } from './dto/create-service.dto';
import { Service } from './entities/service.entity';
import { ResourceAssignment } from './entities/resource-assignment.entity';
import { UpdateServiceDto } from './dto/update-service.dto';
import { Cliente } from '../clients/entities/client.entity';
import { MailerService } from '../mailer/mailer.service';
export declare class ServicesService {
    private serviceRepository;
    private assignmentRepository;
    private vehiclesRepository;
    private empleadosRepository;
    private toiletsRepository;
    private clientsService;
    private employeesService;
    private vehiclesService;
    private toiletsService;
    private readonly vehicleMaintenanceService;
    private readonly toiletMaintenanceService;
    private condicionesContractualesRepository;
    private readonly employeeLeavesService;
    private dataSource;
    private readonly futureCleaningsService;
    private clientesRepository;
    private readonly mailerService;
    private readonly logger;
    constructor(serviceRepository: Repository<Service>, assignmentRepository: Repository<ResourceAssignment>, vehiclesRepository: Repository<Vehicle>, empleadosRepository: Repository<Empleado>, toiletsRepository: Repository<ChemicalToilet>, clientsService: ClientService, employeesService: EmployeesService, vehiclesService: VehiclesService, toiletsService: ChemicalToiletsService, vehicleMaintenanceService: VehicleMaintenanceService, toiletMaintenanceService: ToiletMaintenanceService, condicionesContractualesRepository: Repository<CondicionesContractuales>, employeeLeavesService: EmployeeLeavesService, dataSource: DataSource, futureCleaningsService: FutureCleaningsService, clientesRepository: Repository<Cliente>, mailerService: MailerService);
    create(dto: CreateServiceDto): Promise<Service>;
    private createInstalacion;
    private createCapacitacion;
    private createLimpieza;
    private createGenerico;
    private createBaseService;
    private getDefaultCantidadEmpleados;
    private scheduleEmployeeStatusForCapacitacion;
    findAll(filters?: FilterServicesDto, page?: number, limit?: number): Promise<any>;
    findOne(id: number): Promise<Service>;
    update(id: number, updateServiceDto: UpdateServiceDto): Promise<Service>;
    private mapServiceTypeToEmpleadoState;
    remove(id: number): Promise<void>;
    changeStatus(id: number, nuevoEstado: ServiceState, comentarioIncompleto?: string): Promise<Service>;
    private releaseNonToiletResources;
    assignResourcesManually(serviceId: number, dtos: ResourceAssignmentDto[], manager: EntityManager): Promise<ResourceAssignment[]>;
    private releaseAssignedResources;
    private validateStatusTransition;
    findByDateRange(startDate: string, endDate: string): Promise<Service[]>;
    getRemainingWeekServices(): Promise<Service[]>;
    findToday(): Promise<Service[]>;
    findByStatus(estado: ServiceState): Promise<Service[]>;
    private verifyResourcesAvailability;
    private validateServiceTypeSpecificRequirements;
    getProximosServicios(): Promise<Service[]>;
    getStats(): Promise<{
        totalInstalacion: number;
        totalLimpieza: number;
        totalRetiro: number;
        total: number;
    }>;
    getResumenServicios(): Promise<void>;
    getCapacitacionServices(page: number, limit: number, search?: string): Promise<{
        data: Service[];
        totalItems: number;
        currentPage: number;
        totalPages: number;
    }>;
    getInstalacionServices(page: number, limit: number): Promise<{
        data: Service[];
        totalItems: number;
        currentPage: number;
        totalPages: number;
    }>;
    getLimpiezaServices(page: number, limit: number): Promise<{
        data: Service[];
        totalItems: number;
        currentPage: number;
        totalPages: number;
    }>;
    getLastServices(employeeId: number): Promise<Service[]>;
    getCompletedServices(employeeId: number, paginationDto: {
        page?: number;
        limit?: number;
        search?: string;
    }): Promise<any>;
    getAssignedPendings(employeeId: number): Promise<Service[]>;
    getAssignedInProgress(employeeId: number): Promise<Service[]>;
    validateResourcesAvailability(dto: CreateServiceDto): Promise<{
        valid: boolean;
        warnings: string[];
        errors: string[];
    }>;
}
